doctype html
html
    head
        link(rel="shortcut icon" href="#")
        link(rel='stylesheet', type='text/css', href='../css/country.css')
        script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js')
        script(src='https://code.jquery.com/ui/1.12.1/jquery-ui.js')
        link(rel='stylesheet', href='https://unpkg.com/leaflet@1.3.4/dist/leaflet.css')
        script(src='https://unpkg.com/leaflet@1.3.4/dist/leaflet.js')
        link(rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous")
        script(src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous")
        meta(charset='utf-8')
        meta(name="viewport" content="width=device-width, initial-scale=1.0")
        title#countryNameTitle #{' '+name}

    body
        h1#countryName.mt-5 #{' '+name}
        #main-container.mt-5.container
            #flag-container
                img#flag(src=flag)
            #info-container.mt-5.text-center
                p
                    | Capital:
                    span#countryCapital #{' '+capital}
                p
                    | Dialing Code:
                    span#countryAlphaCode #{' '+alphaCode}
                p
                    | Population:
                    span#countryPopulation #{' '+population.toLocaleString()}
                p
                    | Languages:
                    span#countryLanguages 
                        each language in languages
                            =language.name+', '
                p
                    | Region:
                    span#countryRegion #{' '+region}
                p
                    | Subregion:
                    span#countrySubregion #{' '+subregion}
        // events
        - eventsOnMap = new Array;
        .spaces1
        h1#upcomingEvents(style='text-align:left; margin: 65px;') #{'Upcoming Events: ' + events.length}
        #tableWrapper
            .scroll
                table#eventsTable
                    tr#headerTable
                        th Title
                        th City
                        th Start Time
                        th Details
                    each event,i in events
                        - eventsOnMap.push({lat:event.latitude, lng:event.longitude, title:event.title})
                        tr
                            td= event.title
                            td= event.city_name
                            td= event.start_time
                            td(style='color:blue;cursor:pointer;text-decoration:underline;', onclick=`eventDetails(${i})`) Details and near venues
        .spaces1
        .spaces1
        footer
            #mapContainer
                #map
            .text-center
                .spaces1
                button#back-btn(onclick="window.location.assign('/')", type='button') Back to search page
            .spaces2

        script.
            events = !{JSON.stringify(events)};
            function eventDetails(i) {
                sessionStorage.eTitle = events[i].title;
                sessionStorage.eDescription = events[i].description;
                sessionStorage.eAddress = events[i].venue_address;
                sessionStorage.eStartTime = events[i].start_time;
                window.location.assign(`/country/details?lat=${events[i].latitude}&long=${events[i].longitude}`)
            }
        - if (eventsOnMap.length > 0) 
            script.
                eventsOnMap = !{JSON.stringify(eventsOnMap)};
                let map = L.map('map').setView([90, 90], 4);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);
                let markerArray = [];
                for (let i = 0; i < eventsOnMap.length; i++) {
                    let marker = L.marker([eventsOnMap[i].lat, eventsOnMap[i].lng]).addTo(map)
                        .bindPopup(eventsOnMap[i].title);
                    markerArray.push(marker);
                }
                var group = L.featureGroup(markerArray).addTo(map);
                if (group.getBounds().isValid()) {
                    map.fitBounds(group.getBounds());
                }